{"version":3,"sources":["tic-tac-toe/components/tic-tac-toe-square.component.tsx","tic-tac-toe/tic-tac-toe.container.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TicTacToeOptionWrapper","styled","div","allTheSameCharacter","possiblePositions","includes","css","TicTacToeSquare","TicTacToeProps","useState","choosenCharacter","clickHandlerParams","setChoosenCharacter","onClick","turn","setTurn","map","possiblePosition","dispatch","type","payload","setPositionHandler","clickHandler","positions","initialState","firstRow","secondRow","thirdRow","firstColumn","secondColumn","thirdColumn","firstDiagonal","secondDiagonal","reducer","state","action","TicTacToeWrapper","TicTacToeArea","TicTacToe","useReducer","setAllTheSameCharacter","useEffect","position","array","length","every","v","squareProps","ticTacToeSquares","ticTacToeSquare","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f2eba7d.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport {\r\n  PossiblePosition,\r\n  TicTacToeSquareProps,\r\n  Turn,\r\n} from \"../tic-tac-toe.container\";\r\n\r\ntype ClickHandlerObjectParam = {\r\n  choosenCharacter: Turn | \"\";\r\n  setChoosenCharacter: React.Dispatch<React.SetStateAction<Turn | \"\">>;\r\n  TicTacToeProps: TicTacToeSquareProps;\r\n};\r\n\r\nconst setPositionHandler = (TicTacToeProps: TicTacToeSquareProps) => {\r\n  TicTacToeProps.possiblePositions.map((possiblePosition) =>\r\n    TicTacToeProps.dispatch({\r\n      type: possiblePosition,\r\n      payload: TicTacToeProps.turn,\r\n    })\r\n  );\r\n};\r\n\r\nconst clickHandler = ({\r\n  choosenCharacter,\r\n  setChoosenCharacter,\r\n  TicTacToeProps,\r\n}: ClickHandlerObjectParam) => {\r\n  if (choosenCharacter === \"\") {\r\n    if (TicTacToeProps.turn === \"X\") {\r\n      setChoosenCharacter(\"X\");\r\n      TicTacToeProps.setTurn(\"O\");\r\n    } else {\r\n      setChoosenCharacter(\"O\");\r\n      TicTacToeProps.setTurn(\"X\");\r\n    }\r\n    setPositionHandler(TicTacToeProps);\r\n  }\r\n};\r\n\r\nconst TicTacToeSquare: React.FC<TicTacToeSquareProps> = ({\r\n  ...TicTacToeProps\r\n}) => {\r\n  const [choosenCharacter, setChoosenCharacter] = useState<Turn | \"\">(\"\");\r\n  const clickHandlerParams = {\r\n    choosenCharacter,\r\n    setChoosenCharacter,\r\n    TicTacToeProps,\r\n  };\r\n  return (\r\n    <TicTacToeOptionWrapper\r\n      allTheSameCharacter={TicTacToeProps.allTheSameCharacter}\r\n      possiblePositions={TicTacToeProps.possiblePositions}\r\n      onClick={() =>\r\n        TicTacToeProps.allTheSameCharacter === \"\" &&\r\n        clickHandler(clickHandlerParams)\r\n      }\r\n    >\r\n      <h2>{choosenCharacter}</h2>\r\n    </TicTacToeOptionWrapper>\r\n  );\r\n};\r\n\r\nconst TicTacToeOptionWrapper = styled.div<{\r\n  allTheSameCharacter: PossiblePosition | \"\";\r\n  possiblePositions: PossiblePosition[];\r\n}>`\r\n  cursor: pointer;\r\n  border: 1px solid black;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 166px;\r\n\r\n  ${({ allTheSameCharacter, possiblePositions }) =>\r\n    allTheSameCharacter && possiblePositions.includes(allTheSameCharacter)\r\n      ? css`\r\n          background-color: green;\r\n          color: white;\r\n        `\r\n      : \"\"}\r\n\r\n  h2 {\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    font-size: 70px;\r\n  }\r\n`;\r\n\r\nexport default TicTacToeSquare;\r\n","import { useState, useReducer, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TicTacToeSquare from \"./components/tic-tac-toe-square.component\";\r\n\r\nexport type Turn = \"X\" | \"O\";\r\n\r\nexport type TicTacToeSquareProps = {\r\n  turn: Turn;\r\n  setTurn: React.Dispatch<React.SetStateAction<Turn>>;\r\n  dispatch: React.Dispatch<ActionType>;\r\n  possiblePositions: PossiblePosition[];\r\n  allTheSameCharacter: PossiblePosition | \"\";\r\n};\r\n\r\nexport type PossiblePosition =\r\n  | \"firstRow\"\r\n  | \"secondRow\"\r\n  | \"thirdRow\"\r\n  | \"firstColumn\"\r\n  | \"secondColumn\"\r\n  | \"thirdColumn\"\r\n  | \"firstDiagonal\"\r\n  | \"secondDiagonal\";\r\n\r\ntype StateProps = { [key in PossiblePosition]: Turn[] | [] };\r\n\r\ntype InitialStateProps = { [key in PossiblePosition]: [] };\r\n\r\nconst positions: PossiblePosition[] = [\r\n  \"firstRow\",\r\n  \"secondRow\",\r\n  \"thirdRow\",\r\n  \"firstColumn\",\r\n  \"secondColumn\",\r\n  \"thirdColumn\",\r\n  \"firstDiagonal\",\r\n  \"secondDiagonal\",\r\n];\r\n\r\nconst initialState: InitialStateProps = {\r\n  firstRow: [],\r\n  secondRow: [],\r\n  thirdRow: [],\r\n  firstColumn: [],\r\n  secondColumn: [],\r\n  thirdColumn: [],\r\n  firstDiagonal: [],\r\n  secondDiagonal: [],\r\n};\r\n\r\ntype ActionType = { type: PossiblePosition; payload: Turn };\r\n\r\nconst isAllTheSameValue = (array: Turn[]) => {\r\n  return array.every((v) => v === array[0]);\r\n};\r\n\r\nconst reducer = (state: StateProps, action: ActionType): StateProps => {\r\n  switch (action.type) {\r\n    case \"firstRow\":\r\n      return { ...state, firstRow: [...state.firstRow, action.payload] };\r\n    case \"secondRow\":\r\n      return { ...state, secondRow: [...state.secondRow, action.payload] };\r\n    case \"thirdRow\":\r\n      return { ...state, thirdRow: [...state.thirdRow, action.payload] };\r\n    case \"firstColumn\":\r\n      return { ...state, firstColumn: [...state.firstColumn, action.payload] };\r\n    case \"secondColumn\":\r\n      return {\r\n        ...state,\r\n        secondColumn: [...state.secondColumn, action.payload],\r\n      };\r\n    case \"thirdColumn\":\r\n      return { ...state, thirdColumn: [...state.thirdColumn, action.payload] };\r\n    case \"firstDiagonal\":\r\n      return {\r\n        ...state,\r\n        firstDiagonal: [...state.firstDiagonal, action.payload],\r\n      };\r\n    case \"secondDiagonal\":\r\n      return {\r\n        ...state,\r\n        secondDiagonal: [...state.secondDiagonal, action.payload],\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nconst TicTacToe: React.FC = () => {\r\n  const [turn, setTurn] = useState<Turn>(\"X\");\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [allTheSameCharacter, setAllTheSameCharacter] = useState<\r\n    PossiblePosition | \"\"\r\n  >(\"\");\r\n\r\n  useEffect(() => {\r\n    positions.map((position) => {\r\n      if (state[position].length === 3) {\r\n        if (isAllTheSameValue(state[position])) {\r\n          setAllTheSameCharacter(position);\r\n        }\r\n      }\r\n      return null;\r\n    });\r\n  }, [state]);\r\n\r\n  const squareProps = {\r\n    turn,\r\n    setTurn,\r\n    dispatch,\r\n    allTheSameCharacter,\r\n  };\r\n\r\n  const ticTacToeSquares: TicTacToeSquareProps[] = [\r\n    {\r\n      possiblePositions: [\"firstRow\", \"firstColumn\", \"firstDiagonal\"],\r\n      ...squareProps,\r\n    },\r\n    {\r\n      possiblePositions: [\"firstRow\", \"secondColumn\"],\r\n      ...squareProps,\r\n    },\r\n    {\r\n      possiblePositions: [\"firstRow\", \"thirdColumn\", \"secondDiagonal\"],\r\n      ...squareProps,\r\n    },\r\n    {\r\n      possiblePositions: [\"secondRow\", \"firstColumn\"],\r\n      ...squareProps,\r\n    },\r\n    {\r\n      possiblePositions: [\r\n        \"secondRow\",\r\n        \"secondColumn\",\r\n        \"firstDiagonal\",\r\n        \"secondDiagonal\",\r\n      ],\r\n      ...squareProps,\r\n    },\r\n    {\r\n      possiblePositions: [\"secondRow\", \"thirdColumn\"],\r\n      ...squareProps,\r\n    },\r\n    {\r\n      possiblePositions: [\"thirdRow\", \"firstColumn\", \"secondDiagonal\"],\r\n      ...squareProps,\r\n    },\r\n    {\r\n      possiblePositions: [\"thirdRow\", \"secondColumn\"],\r\n      ...squareProps,\r\n    },\r\n    {\r\n      possiblePositions: [\"thirdRow\", \"thirdColumn\", \"firstDiagonal\"],\r\n      ...squareProps,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <TicTacToeWrapper>\r\n      <TicTacToeArea>\r\n        {ticTacToeSquares.map((ticTacToeSquare, index) => (\r\n          <TicTacToeSquare key={index} {...ticTacToeSquare} />\r\n        ))}\r\n      </TicTacToeArea>\r\n    </TicTacToeWrapper>\r\n  );\r\n};\r\n\r\nconst TicTacToeWrapper = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst TicTacToeArea = styled.div`\r\n  max-width: 500px;\r\n  min-height: 500px;\r\n  width: 100%;\r\n  border: 1px solid black;\r\n  margin: 0 auto;\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport default TicTacToe;\r\n","import TicTacToe from \"./tic-tac-toe/tic-tac-toe.container\";\n\nfunction App() {\n  return <TicTacToe />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}